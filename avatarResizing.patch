diff --git a/go.mod b/go.mod
index 27e192480..4a82a9eb1 100644
--- a/go.mod
+++ b/go.mod
@@ -238,6 +238,7 @@ require (
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/mrjones/oauth v0.0.0-20190623134757-126b35219450 // indirect
 	github.com/mschoch/smat v0.2.0 // indirect
+	github.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646 // indirect
 	github.com/nwaples/rardecode v1.1.3 // indirect
 	github.com/oklog/ulid v1.3.1 // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
diff --git a/go.sum b/go.sum
index 55f24bf2e..3f4242d33 100644
--- a/go.sum
+++ b/go.sum
@@ -583,6 +583,8 @@ github.com/mschoch/smat v0.2.0 h1:8imxQsjDm8yFEAVBe7azKmKSgzSkZXDuKkSq9374khM=
 github.com/mschoch/smat v0.2.0/go.mod h1:kc9mz7DoBKqDyiRL7VZN8KvXQMWeTaVnttLRXOlotKw=
 github.com/msteinert/pam v1.2.0 h1:mYfjlvN2KYs2Pb9G6nb/1f/nPfAttT/Jee5Sq9r3bGE=
 github.com/msteinert/pam v1.2.0/go.mod h1:d2n0DCUK8rGecChV3JzvmsDjOY4R7AYbsNxAT+ftQl0=
+github.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646 h1:zYyBkD/k9seD2A7fsi6Oo2LfFZAehjjQMERAvZLEDnQ=
+github.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646/go.mod h1:jpp1/29i3P1S/RLdc7JQKbRpFeM1dOBd8T9ki5s+AY8=
 github.com/niklasfasching/go-org v1.7.0 h1:vyMdcMWWTe/XmANk19F4k8XGBYg0GQ/gJGMimOjGMek=
 github.com/niklasfasching/go-org v1.7.0/go.mod h1:WuVm4d45oePiE0eX25GqTDQIt/qPW1T9DGkRscqLW5o=
 github.com/nwaples/rardecode v1.1.0/go.mod h1:5DzqNKiOdpKKBH87u8VlvAnPZMXcGRhxWkRpHbbfGS0=
diff --git a/routers/web/base.go b/routers/web/base.go
index 78dde57fa..1cc6c9318 100644
--- a/routers/web/base.go
+++ b/routers/web/base.go
@@ -11,6 +11,12 @@ import (
 	"path"
 	"strings"
 
+	"strconv"
+	"bytes"
+	"image"
+	"image/jpeg"
+	"github.com/nfnt/resize"
+
 	"code.gitea.io/gitea/modules/httpcache"
 	"code.gitea.io/gitea/modules/log"
 	"code.gitea.io/gitea/modules/setting"
@@ -93,6 +99,42 @@ func storageHandler(storageSetting *setting.Storage, prefix string, objStore sto
 			return
 		}
 		defer fr.Close()
-		httpcache.ServeContentWithCacheControl(w, req, path.Base(rPath), fi.ModTime(), fr)
+
+		// Extract the size value
+		query := req.URL.Query()
+		avatarStrSize := query.Get("size")
+
+		if avatarStrSize != "" {
+			log.Warn("Size value: %s", avatarStrSize)
+		} else {
+			log.Warn("Size value not found in the URL")
+		}
+
+		avatar64Size, err := strconv.ParseUint(avatarStrSize, 10, 64)
+		if err != nil {
+			log.Error("Couldn't convert to integer")
+		}
+
+		avatarSize := uint(avatar64Size)
+
+		// Decode the image
+		originalImage, _, err := image.Decode(fr)
+		if err != nil {
+			log.Error("Error decoding image: %v", err)
+		}
+
+		// Resize the image
+		newImage := resize.Resize(avatarSize, 0, originalImage, resize.Lanczos3)
+
+		// Encode the resized image as JPEG
+		var resizedImageBuf bytes.Buffer
+		err = jpeg.Encode(&resizedImageBuf, newImage, nil)
+		if err != nil {
+			log.Error("Error encoding resized image: %v", err)
+		}
+
+		resizedImageReader := bytes.NewReader(resizedImageBuf.Bytes())
+
+		httpcache.ServeContentWithCacheControl(w, req, path.Base(rPath), fi.ModTime(), resizedImageReader)
 	})
 }
